#! /bin/bash

if [[ -z $1 ]];
then
  echo "Provide distribution, i.e. gaussian or uniform, as first positional"
  exit 1
fi

if [[ -z $2 ]];
then
  echo "Provide power to raise number of points to as second positional"
  exit 1
fi

if [[ -z $3 ]];
then
  echo "Provide a decimal seed as a third positional"
  exit 1
fi

d="$1"
n="$2"
seed="$3"

outname="d${d}_n${n}_s${seed}"
parquet="${outname}.parquet"
format="csv"
gen_out="${outname}.${format}"

data_dir="./data"
mkdir -p "$data_dir"

python3 generator.py \
distribution="$d" \
cardinality="$((2 ** $n))" \
dimensions=2 \
geometry="point" \
polysize="0.05" \
maxseg="1" \
seed="$seed" \
format="${format}" \
affinematrix=1,0,0,0,1,0 > "data/$gen_out"

bash -c "ogr2ogr -f \"Parquet\" \"${parquet}\" \"data/$gen_out\"" &
wait

# mv ${parquet} "${data_dir}/"
# rm ${gen_out}
exit 0

# 65402c91-f81b-4a57-a954-ac24f0573d9b: 118187676264114665691750279924969728730
# 5a727e3e-f984-467f-8f1b-7acf597f57ae: 281037504945728560704588181043187623483
# a3e26f05-1dd8-4b9a-b916-540e5bd557c3: 63241934978335497840089225029294079414
# 1d1c46c9-b40c-4fa3-a988-4d903e908646: 79897577349443113052318687045961381792
# 5372fd39-5d31-4f48-aa14-d9a39e7dc1b9: 238369688608474328142001432352178832095

# 790b7c34-5482-4106-a68b-750b4e8f2163: 309516521992599721914005131251595867871
# 1c286cc9-e2db-483d-bb2e-957b1d719000: 226248616828923581418755724993726062354
# bd11f5f3-b92d-4e13-a33c-baf4e238b65d: 245300743176682684414233803962093726870
# 5573eed6-210a-4e34-aa8b-e1d1bcd0839a: 83118218900855486082592407524807085136
# 2ea1ff12-73d8-4f14-a283-e17303f45f93: 310994949596626234693699981426716151532

# 3040ba56-938a-48b7-b3e3-628d77505017: 103728055839786523420668646944381307840
# de1f16e8-b972-495b-b2a9-70fff19bd607: 218196901048911888995142263114118833319
# 593d7117-4c6d-457d-9422-962ff205b541: 158675934737396998213418250788524825054
# f9ea685e-d286-4dec-935c-165da9e159e6: 232961964429664187913086993874117400729
# a0c4f550-5e09-4531-90ad-9a279441de58: 198266971011055503614840458851589033232

# 91b39dda-5346-404a-993e-caf91b4db92c: 311471275048084726387878478101677642381
# a4de0697-fed0-46de-9c2f-03e2a45be933: 187127629605307427324676553416351203852
# 4c944726-2104-4cdb-b689-36bb61540a5d: 32539484574379826431152483273094962658
# b4c879ed-33e3-4efd-8f78-3e2883333174: 78634445875808626820666721147246105882
# a71c9300-8f1f-4810-a72b-af333116c4bc: 191650833494423160084350733004591141663





a="118187676264114665691750279924969728730
281037504945728560704588181043187623483
63241934978335497840089225029294079414
79897577349443113052318687045961381792
238369688608474328142001432352178832095"

b="309516521992599721914005131251595867871
226248616828923581418755724993726062354
245300743176682684414233803962093726870
83118218900855486082592407524807085136
310994949596626234693699981426716151532"

c="103728055839786523420668646944381307840
218196901048911888995142263114118833319
158675934737396998213418250788524825054
232961964429664187913086993874117400729
198266971011055503614840458851589033232"

d="311471275048084726387878478101677642381
187127629605307427324676553416351203852
32539484574379826431152483273094962658
78634445875808626820666721147246105882
191650833494423160084350733004591141663"

for x in {0..4};
do
  echo "generating $((0 * x))-$((4 * x))..."
  for y in {0..10};
  do
    screen -Dm bash -c "./generator gaussian 26 $((((EPOCHSECONDS + x + y) % (RANDOM * 2 + RANDOM))))" &
  done
  wait
done

for z in {0..8};
do
  screen -Dm bash -c "./generator gaussian 26 $((((EPOCHSECONDS - z) % (RANDOM * 2 + RANDOM))))" &
done
wait

pbzip2 -1zkvf -m2000 data/*.hex
